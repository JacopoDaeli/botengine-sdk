{"version":3,"sources":["dialog/prompt/simple-prompt-recognizer.js"],"names":[],"mappings":"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","file":"dialog/prompt/simple-prompt-recognizer.js","sourcesContent":["'use strict'\n\nimport promptType from './prompt-type'\nimport Dialog from '../dialog'\nimport entityRecognizer from '../entity-recognizer'\n\nexport default class SimplePromptRecognizer {\n  constructor () {\n    this.cancelExp = /^(cancel|nevermind|never mind|stop|forget it|quit)/i\n  }\n\n  recognize (args, callback, session) {\n    this.checkCanceled(args, () => {\n      try {\n        let score = 0.0\n        let response = null\n        const text = args.utterance.trim()\n        switch (args.promptType) {\n          default:\n          case promptType.text:\n            score = 0.1\n            response = text\n            break\n          case promptType.number:\n            const n = entityRecognizer.parseNumber(text)\n            if (!isNaN(n)) {\n              score = n.toString().length / text.length\n              response = n\n            }\n            break\n          case promptType.confirm:\n            let b = entityRecognizer.parseBoolean(text)\n            if (typeof b !== 'boolean') {\n              const n = entityRecognizer.parseNumber(text)\n              if (!isNaN(n) && n > 0 && n <= 2) {\n                b = (n === 1)\n              }\n            }\n            if (typeof b === 'boolean') {\n              score = 1.0\n              response = b\n            }\n            break\n          case promptType.time:\n            const entity = entityRecognizer.recognizeTime(text, args.refDate ? new Date(args.refDate) : null)\n            if (entity) {\n              score = entity.entity.length / text.length\n              response = entity\n            }\n            break\n          case promptType.choice:\n            let best = entityRecognizer.findBestMatch(args.enumValues, text)\n            if (!best) {\n              const n = entityRecognizer.parseNumber(text)\n              if (!isNaN(n) && n > 0 && n <= args.enumValues.length) {\n                best = {\n                  index: n - 1,\n                  entity: args.enumValues[n - 1],\n                  score: 1.0\n                }\n              }\n            }\n            if (best) {\n              score = best.score\n              response = best\n            }\n            break\n          case promptType.attachment:\n            if (args.attachments && args.attachments.length > 0) {\n              score = 1.0\n              response = args.attachments\n            }\n            break\n        }\n        args.compareConfidence(args.language, text, score, (handled) => {\n          if (!handled && score > 0) {\n            callback({\n              resumed: Dialog.ResumeReason.completed,\n              promptType: args.promptType,\n              response: response\n            })\n          } else {\n            callback({\n              resumed: Dialog.ResumeReason.notCompleted,\n              promptType: args.promptType,\n              handled: handled\n            })\n          }\n        })\n      } catch (err) {\n        callback({\n          resumed: Dialog.ResumeReason.notCompleted,\n          promptType: args.promptType,\n          error: err instanceof Error ? err : new Error(err.toString())\n        })\n      }\n    }, callback)\n  }\n\n  checkCanceled (args, onContinue, callback) {\n    if (!this.cancelExp.test(args.utterance.trim())) {\n      onContinue()\n    } else {\n      callback({\n        resumed: Dialog.ResumeReason.canceled,\n        promptType: args.promptType\n      })\n    }\n  }\n}\n"],"sourceRoot":"/Users/jacopodaeli/Devs/wit-bot-builder/src"}
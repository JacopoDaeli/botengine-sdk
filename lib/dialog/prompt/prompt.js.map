{"version":3,"sources":["dialog/prompt/prompt.js"],"names":[],"mappings":"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","file":"dialog/prompt/prompt.js","sourcesContent":["'use strict'\n\nimport promptType from './prompt-type'\nimport listStyle from './list-style'\nimport SimplePromptRecognizer from './simple-prompt-recognizer'\nimport Dialog from '../dialog'\nimport entityRecognizer from '../entity-recognizer'\nimport Message from '../../message'\nimport { preferButtons } from '../../channel'\nimport { randomPrompt, beginPrompt } from '../../utils'\n\nclass Prompt extends Dialog {\n  begin (session, _args) {\n    const args = args || {}\n    args.maxRetries = args.maxRetries || 1\n    for (let key in args) {\n      if (args.hasOwnProperty(key)) {\n        session.dialogData[key] = args[key]\n      }\n    }\n    this.sendPrompt(session, args)\n  }\n\n  replyReceived (session) {\n    const args = session.dialogData\n\n    Prompt.options.recognizer.recognize({\n      promptType: args.promptType,\n      utterance: session.message.text,\n      language: session.message.language,\n      attachments: session.message.attachments,\n      enumValues: args.enumValues,\n      refDate: args.refDate,\n      compareConfidence (language, utterance, score, callback) {\n        session.compareConfidence(language, utterance, score, callback)\n      }\n    }, (result) => {\n      if (!result.handled) {\n        if (result.error || result.resumed === Dialog.ResumeReason.completed ||\n          result.resumed === Dialog.ResumeReason.canceled || args.maxRetries === 0) {\n          result.promptType = args.promptType\n          session.endDialog(result)\n        } else {\n          args.maxRetries--\n          this.sendPrompt(session, args, true)\n        }\n      }\n    })\n  }\n\n  sendPrompt (session, args, _retry) {\n    let retry = !!_retry\n    if (retry && typeof args.retryPrompt === 'object' && !Array.isArray(args.retryPrompt)) {\n      session.send(args.retryPrompt)\n    } else if (typeof args.prompt === 'object' && !Array.isArray(args.prompt)) {\n      session.send(args.prompt)\n    } else {\n      let style = listStyle.none\n      if (args.promptType === promptType.choice || args.promptType === promptType.confirm) {\n        style = args.listStyle\n        if (style === listStyle.auto) {\n          if (preferButtons(session, args.enumValues.length, retry)) {\n            style = listStyle.button\n          } else if (!retry) {\n            style = args.enumValues.length < 3 ? listStyle.inline : listStyle.list\n          } else {\n            style = listStyle.none\n          }\n        }\n      }\n      let prompt = null\n      if (retry) {\n        if (args.retryPrompt) {\n          prompt = randomPrompt(args.retryPrompt)\n        } else {\n          let type = promptType[args.promptType]\n          prompt = randomPrompt(Prompt.defaultRetryPrompt[type])\n        }\n      } else {\n        prompt = randomPrompt(args.prompt)\n      }\n      let connector = ''\n      let list = null\n      const msg = new Message()\n      switch (style) {\n        case listStyle.button:\n          let a = {\n            actions: []\n          }\n          for (let i = 0; i < session.dialogData.enumValues.length; i++) {\n            const action = session.dialogData.enumValues[i]\n            a.actions.push({\n              title: action,\n              message: action\n            })\n          }\n          msg.setText(session, prompt)\n            .addAttachment(a)\n          break\n        case listStyle.inline:\n          list = ' '\n          args.enumValues.forEach((value, index) => {\n            list += `${connector}${(index + 1)}. ${value}`\n            if (index === args.enumValues.length - 2) {\n              connector = index === 0 ? ' or ' : ', or '\n            } else {\n              connector = ', '\n            }\n          })\n          msg.setText(session, prompt + '%s', list)\n          break\n        case listStyle.list:\n          list = '\\n   '\n          args.enumValues.forEach((value, index) => {\n            list += `${connector}${(index + 1)}. ${value}`\n            connector = '\\n   '\n          })\n          msg.setText(session, prompt + '%s', list)\n          break\n        default:\n          msg.setText(session, prompt)\n          break\n      }\n      session.send(msg)\n    }\n  }\n  configure (options) {\n    if (options) {\n      for (let key in options) {\n        if (options.hasOwnProperty(key)) {\n          Prompt.options[key] = options[key]\n        }\n      }\n    }\n  }\n  text (session, prompt) {\n    beginPrompt(session, {\n      promptType: promptType.text,\n      prompt: prompt\n    })\n  }\n\n  number (session, prompt, options) {\n    const args = options || {}\n    args.promptType = promptType.number\n    args.prompt = prompt\n    beginPrompt(session, args)\n  }\n\n  confirm (session, prompt, options) {\n    const args = options || {}\n    args.promptType = promptType.confirm\n    args.prompt = prompt\n    args.enumValues = ['yes', 'no']\n    args.listStyle = args.hasOwnProperty('listStyle') ? args.listStyle : listStyle.auto\n    beginPrompt(session, args)\n  }\n\n  choice (session, prompt, choices, options) {\n    const args = options || {}\n    args.promptType = promptType.choice\n    args.prompt = prompt\n    args.listStyle = args.hasOwnProperty('listStyle') ? args.listStyle : listStyle.auto\n    args.enumValues = entityRecognizer.expandChoices(choices)\n    beginPrompt(session, args)\n  }\n\n  time (session, prompt, options) {\n    const args = options || {}\n    args.promptType = promptType.time\n    args.prompt = prompt\n    beginPrompt(session, args)\n  }\n\n  attachment (session, prompt, options) {\n    const args = options || {}\n    args.promptType = promptType.attachment\n    args.prompt = prompt\n    beginPrompt(session, args)\n  }\n}\n\nPrompt.options = {\n  recognizer: new SimplePromptRecognizer()\n}\n\nPrompt.defaultRetryPrompt = {\n  text: 'I didn\\'t understand. Please try again.',\n  number: 'I didn\\'t recognize that as a number. Please enter a number.',\n  confirm: 'I didn\\'t understand. Please answer \\'yes\\' or \\'no\\'.',\n  choice: 'I didn\\'t understand. Please choose an option from the list.',\n  time: 'I didn\\'t recognize the time you entered. Please try again.',\n  attachment: 'I didn\\'t receive a file. Please try again.'\n}\n"],"sourceRoot":"/Users/jacopodaeli/Devs/wit-bot-builder/src"}
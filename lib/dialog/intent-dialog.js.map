{"version":3,"sources":["dialog/intent-dialog.js"],"names":[],"mappings":"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","file":"dialog/intent-dialog.js","sourcesContent":["'use strict'\n\nimport Dialog from './dialog'\nimport IntentGroup from './intent-group'\nimport consts from '../constants'\n\nclass IntentDialog extends Dialog {\n  constructor () {\n    super()\n    this.groups = {}\n    this.confidenceThreshold = 0.1\n  }\n\n  begin (session, args) {\n    if (this.beginDialog) {\n      this.beginDialog(session, args, () => {\n        super.begin.call(this, session, args)\n      })\n    } else {\n      super.begin.call(this, session, args)\n    }\n  }\n\n  replyReceived (session) {\n    const msg = session.message\n    this.recognizeIntents(msg.language, msg.text, (err, intents, entities) => {\n      if (!err) {\n        const topIntent = this.findTopIntent(intents)\n        const score = topIntent ? topIntent.score : 0\n        session.compareConfidence(msg.language, msg.text, score, (handled) => {\n          if (!handled) this.invokeIntent(session, intents, entities)\n        })\n      } else {\n        session.endDialog({\n          error: new Error(`Intent recognition error: ${err.message}`)\n        })\n      }\n    })\n  }\n\n  dialogResumed (session, result) {\n    if (result.captured) {\n      this.invokeIntent(session, result.captured.intents, result.captured.entities)\n    } else {\n      const activeGroup = session.dialogData[consts.Data.Group]\n      const activeIntent = session.dialogData[consts.Data.Intent]\n      const group = activeGroup ? this.groups[activeGroup] : null\n      const handler = group && activeIntent ? group._intentHandler(activeIntent) : null\n      if (handler) {\n        handler(session, result)\n      } else {\n        super.dialogResumed.call(this, session, result)\n      }\n    }\n  }\n\n  compareConfidence (action, language, utterance, score) {\n    if (score < IntentDialog.CAPTURE_THRESHOLD && this.captureIntent) {\n      this.recognizeIntents(language, utterance, (err, intents, entities) => {\n        if (!err) {\n          let matches = null\n          const topIntent = this.findTopIntent(intents)\n          if (topIntent && topIntent.score > this.confidenceThreshold && topIntent.score > score) {\n            matches = this.findHandler(topIntent)\n          }\n          if (matches) {\n            this.captureIntent({\n              next: action.next,\n              userData: action.userData,\n              dialogData: action.dialogData,\n              endDialog: () => {\n                action.endDialog({\n                  resumed: Dialog.resumeReason.completed,\n                  captured: { intents, entities }\n                })\n              },\n              send: action.send\n            }, topIntent, entities)\n          } else {\n            action.next()\n          }\n        } else {\n          console.error(`Intent recognition error: ${err.message}`)\n          action.next()\n        }\n      })\n    } else {\n      action.next()\n    }\n  }\n\n  addGroup (group) {\n    const id = group.getId()\n    if (!this.groups.hasOwnProperty(id)) {\n      this.groups[id] = group\n    } else {\n      throw new Error(`Group of ${id} already exists within the dialog.`)\n    }\n    return this\n  }\n\n  onBegin (handler) {\n    this.beginDialog = handler\n    return this\n  }\n\n  on (intent, dialogId, dialogArgs) {\n    this.getDefaultGroup().on(intent, dialogId, dialogArgs)\n    return this\n  }\n\n  onDefault (dialogId, dialogArgs) {\n    this.getDefaultGroup().on(consts.Intents.Default, dialogId, dialogArgs)\n    return this\n  }\n\n  getThreshold () {\n    return this.confidenceThreshold\n  }\n\n  setThreshold (score) {\n    this.confidenceThreshold = score\n    return this\n  }\n\n  invokeIntent (session, intents, entities) {\n    try {\n      let match = null\n      let topIntent = this.findTopIntent(intents)\n      if (topIntent && topIntent.score > this.confidenceThreshold) {\n        match = this.findHandler(topIntent)\n      }\n      if (!match) {\n        topIntent = {\n          intent: consts.Intents.Default,\n          score: 1.0\n        }\n        match = {\n          groupId: consts.Id.DefaultGroup,\n          handler: this.getDefaultGroup()._intentHandler(topIntent.intent)\n        }\n      }\n      if (match && match.handler) {\n        session.dialogData[consts.Data.Group] = match.groupId\n        session.dialogData[consts.Data.Intent] = topIntent.intent\n        match.handler(session, { intents, entities })\n      } else {\n        session.send()\n      }\n    } catch (e) {\n      session.error(e instanceof Error ? e : new Error(e.toString()))\n    }\n  }\n\n  findTopIntent (intents) {\n    let topIntent = null\n    if (intents) {\n      for (let i = 0; i < intents.length; i++) {\n        const intent = intents[i]\n        if (!topIntent || intent.score > topIntent.score) {\n          topIntent = intent\n        }\n      }\n    }\n    return topIntent\n  }\n\n  findHandler (intent) {\n    for (let groupId in this.groups) {\n      // TODO: Change intent.intent (is ugly)\n      const handler = this.groups[groupId]._intentHandler(intent.intent)\n      if (handler) return { groupId, handler }\n    }\n    return null\n  }\n\n  getDefaultGroup () {\n    let group = this.groups[consts.Id.DefaultGroup]\n    if (!group) {\n      group = new IntentGroup(consts.Id.DefaultGroup)\n      this.groups[consts.Id.DefaultGroup] = group\n    }\n    return group\n  }\n}\n\nIntentDialog.CAPTURE_THRESHOLD = 0.6\n\nexport default IntentDialog\n"],"sourceRoot":"/Users/jacopodaeli/Devs/botengine-sdk/src"}
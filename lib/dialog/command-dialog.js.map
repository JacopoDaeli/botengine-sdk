{"version":3,"sources":["dialog/command-dialog.js"],"names":[],"mappings":"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","file":"dialog/command-dialog.js","sourcesContent":["'use strict'\n\nimport Dialog from './dialog'\nimport DialogAction from './dialog-action'\nimport consts from '../constants'\nimport { waterfall } from '../utils'\n\nclass CommandDialog extends Dialog {\n  constructor () {\n    super()\n    this.commands = []\n  }\n\n  begin (session, args) {\n    if (this.beginDialog) {\n      session.dialogData[consts.Data.Handler] = -1\n      this.beginDialog(session, args, () => {\n        super.begin.call(this, session, args)\n      })\n    } else {\n      super.begin.call(this, session, args)\n    }\n  }\n\n  replyReceived (session) {\n    let score = 0.0\n    let expression = null\n    let matches = null\n    const text = session.message.text\n    let matched = null\n    for (let i = 0; i < this.commands.length; i++) {\n      const cmd = this.commands[i]\n      for (let j = 0; j < cmd.expressions.length; j++) {\n        expression = cmd.expressions[j]\n        if (expression.test(text)) {\n          matched = cmd\n          session.dialogData[consts.Data.Handler] = i\n          matches = expression.exec(text)\n          if (matches) {\n            let length = 0\n            matches.forEach((value) => {\n              if (value) length += value.length\n            })\n            score = length / text.length\n          }\n          break\n        }\n      }\n      if (matched) break\n    }\n    if (!matched && this.default) {\n      expression = null\n      matched = this.default\n      session.dialogData[consts.Data.Handler] = this.commands.length\n    }\n    if (matched) {\n      session.compareConfidence(session.message.language, text, score, (handled) => {\n        if (!handled) {\n          matched.fn(session, {\n            expression: expression,\n            matches: matches\n          })\n        }\n      })\n    } else {\n      session.send()\n    }\n  }\n\n  dialogResumed (session, result) {\n    let cur = null\n    const handler = session.dialogData[consts.Data.Handler]\n\n    if (handler >= 0 && handler < this.commands.length) {\n      cur = this.commands[handler]\n    } else if (handler >= this.commands.length && this.default) {\n      cur = this.default\n    }\n    if (cur) {\n      cur.fn(session, result)\n    } else {\n      super.dialogResumed.call(this, session, result)\n    }\n  }\n\n  onBegin (handler) {\n    this.beginDialog = handler\n    return this\n  }\n\n  matches (patterns, dialogId, dialogArgs) {\n    let fn = null\n    const p = (!Array.isArray(patterns) ? [patterns] : patterns)\n    if (Array.isArray(dialogId)) {\n      fn = waterfall(dialogId)\n    } else if (typeof dialogId === 'string') {\n      fn = DialogAction.beginDialog(dialogId, dialogArgs)\n    } else {\n      fn = waterfall([dialogId])\n    }\n    const expressions = []\n    for (let i = 0; i < p.length; i++) {\n      expressions.push(new RegExp(p[i], 'i'))\n    }\n    this.commands.push({ expressions, fn })\n    return this\n  }\n\n  onDefault (dialogId, dialogArgs) {\n    let fn = null\n    if (Array.isArray(dialogId)) {\n      fn = waterfall(dialogId)\n    } else if (typeof dialogId === 'string') {\n      fn = DialogAction.beginDialog(dialogId, dialogArgs)\n    } else {\n      fn = waterfall([dialogId])\n    }\n    this.default = { fn }\n    return this\n  }\n}\n\nexport default CommandDialog\n"],"sourceRoot":"/Users/jacopodaeli/Devs/wit-bot-builder/src"}